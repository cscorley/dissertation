---
documentclass: Manuscript
#fontfamily: libertine
fontfamily: times
fontsize: 12pt
biblio-style: chicago
bibliography: papers

lof: Yes
lot: Yes
loa: Yes
appendices: Yes
links-as-notes: Yes

urlcolor: black
citecolor: black
linkcolor: black
toccolor: black

# front matter
location: Tuscaloosa, Alabama
thesistype: A dissertation
submissioninfos:
    - Submitted in partial fulfillment of the requirements
    - for the degree of Doctor of Philosophy
    - in the Department of Computer Science
    - in the Graduate School of
    - The University of Alabama

author: Christopher Scott Corley
title: Online Topic Modeling for Software Maintenance Using A Changeset-based Approach
date: 2018
committee:
    - Jeffrey C. Carver, Committee Chair
    - Jeffrey G. Gray
    - Nicholas A. Kraft
    - Randy K. Smith
    - Travis L. Atkison

# change the dedication and acknowledgements to text
dedication: \centering \textit{For Mom and Sis}

acknowledgments: |

    There are many, *many* people I would like to acknowledge and thank for
    their continued support and friendship over the years.  Honestly, I have too
    many people I would like to thank and I am sorry that I will not be able to
    thank everyone.

    I will start with the obvious and thank my advisor, Nicholas Kraft.
    I thank him for taking a risk on me and allowing me to study under him.
    I would also like to thank him for always being there when I needed support,
    for being patient and understanding, and most importantly for encouraging me
    to be a better person and to do more with my life.  He has always been, and
    always will be, more than just an advisor to me -- he is a friend.

    Of course, this dissertation would not have materialized without the
    guidance and encouragement of my committee.  I would especially like to
    thank Dr. Carver for becoming my committee chair in the middle of my studies
    and keeping me on track to graduate.

    I thank my various co-authors, to everyone that had the patience to work
    with me, and to those that encouraged me to continue this work.  I'd
    particularly like to thank Hazel Victoria Campbell and Kelly Kashuda.  Other
    co-authors include those I worked with during my year at ABB Corporate
    Research.  Thank you all for allowing me to do something different, and for
    helping me manually solder a bunch of silly lights!  Thank you David
    Shepherd for allowing me to pursue such a fun project and for encouragement
    to finish this dissertation.

    Thank you to the software engineering research community for their
    encouragement, support, and kind wisdom.  I'd like to thank
    Chris Parnin, Abram Hindle, Felienne Hermans, Mike Godfrey, Neil Ernst,
    Patrick Wagstrom, and Dave Binkley.

    I would also not be here without the emotional support and friendship
    I found during my time in Tuscaloosa.  Thank you Heather Wyatt, Brian Oliu,
    Bob Weatherly, Chris Skinner, Austin Stickney, Drew Brooks, Erik Kline, and
    Jeb Richter.  I always look forward to seeing you whenever I visit
    Tuscaloosa.

    I would also like to thank those I've befriended in Chattanooga.  Thank you
    in particular to Brian Hennen and Amanda Norris for being great friends that
    I look forward to knowing for a long time to come.  Thanks also to my former
    and current coworkers Steve Medlin, Russ Wilson, and James Gardner for their
    patience, understanding, and encouragement as I attempted to find a balance
    between working and researching.

    Thanks to my all my lifelong friends for always being there for me.  Thank
    you Cliff and Clay Davis for their friendship, support, encouragement, and
    wisdom.  Thanks to David Stewart and the rest of the Stewart family for
    getting me through my undergraduate studies and into graduate school.  My
    final thank you goes to my dear friend, James Holden, for being my longest
    and kindest friend, and for sparking my interest in computing.

    I have been so fortunate to know all of you.


# This must be limited to 350 words!
abstract: |

    Topic modeling is a machine learning technique for discovering thematic
    structure within a corpus.  Topic models have been applied to several areas
    of software engineering, including bug localization, feature location,
    triaging change requests, and traceability link recovery.  Many of these
    approaches train topic models on a source code snapshot -- a revision or
    state of code at a particular point of time, such as a versioned release.
    However, source code evolution leads to model obsolescence and thus to the
    need to retrain the model from the latest snapshot, incurring a non-trivial
    computational cost of model re-learning.

    This work proposes and investigates an approach that can remedy the
    obsolescence problem.  Conventional wisdom in the software maintenance
    research community holds that the topic model training information must be
    the same information that is of interest for retrieval.  The primary insight
    for this work is that topic models can infer the topics of any information,
    regardless of the information used to train the model.  Pairing online topic
    modeling with mining software repositories, I can remove the need to retrain
    a model and achieve model persistence.  For this, I suggest training of
    topic models on the software repository history in the form of the
    *changeset* -- a textual representation of the changes that occur between
    two source code snapshots.

    To show the feasibility of this approach, I investigate two popular
    applications of text retrieval in software maintenance, feature location and
    developer identification.  Feature location is a search activity for
    locating the source code entity that relates to a feature of interest.
    Developer identification is similar, but focuses on identifying the
    developer most apt for working on a feature of interest.  Further, to
    demonstrate the usability of changeset-based topic models, I
    investigate whether I can coalesce topic-modeling-based maintenance tasks
    into using a *single* model, rather than needing to train a model for each
    task at hand.  In sum, this work aims to show that *training online topic
    models on software repositories removes retraining costs while maintaining
    accuracy of a traditional snapshot-based topic model for different software
    maintenance problems.*

# don't delete :)
...
